using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using validatequotes.Helpers;

namespace validatequotes
{
    public class Program
    {
        private string fileName;
        private string attestDnsName;
        private bool includeDetails;

        public static void Main(string[] args)
        {
            Task.WaitAll(new Program(args).RunAsync());
        }

        public Program(string[] args)
        {
            this.fileName = args.Length > 0 ? args[0] : (Directory.GetCurrentDirectory().Contains("bin", StringComparison.InvariantCultureIgnoreCase) ? "../../../../genquotes/quotes/enclave.info.release.json" : "../genquotes/quotes/enclave.info.release.json");
            this.attestDnsName = args.Length > 1 ? args[1] : "maavaltest.uks.test.attest.azure.net";
            this.includeDetails = true;
            if (args.Length > 2)
            {
                bool.TryParse(args[2], out this.includeDetails);
            }

            if (args.Length < 3)
            {
                Logger.WriteBanner($"USAGE");
                Logger.WriteLine($"Usage: dotnet validatequotes.core.dll <JSON file name> <attest DNS name> <include details bool>");
                Logger.WriteLine($"Usage: dotnet run                     <JSON file name> <attest DNS name> <include details bool>");
                Logger.WriteLine($" - validates remote attestation quotes generated by genquote application");
                Logger.WriteLine($" - validates via calling the OE attestation endpoint on the MAA service");
            }

            Logger.WriteBanner($"PARAMETERS FOR THIS RUN");
            Logger.WriteLine($"Validating filename                : {this.fileName}");
            Logger.WriteLine($"Using attestation provider         : {this.attestDnsName}");
            Logger.WriteLine($"Including details                  : {this.includeDetails}");
        }

        public async Task RunAsync()
        {
            // Fetch file
            var enclaveInfo = EnclaveInfo.CreateFromFile(this.fileName);

            // Send to service for attestation
            var maaService = new MaaService(this.attestDnsName);

            List<Task> myTasks = new List<Task>();
            int threadID = 1;
            long totalCount = 0;
            Stopwatch uberStopWatch = new Stopwatch();
            uberStopWatch.Start();
            for (int i=0; i<40; i++){
                myTasks.Add(Task.Run(async () => {
                    long i=0;
                    int myThreadID = threadID++;
                    Stopwatch myStopWatch = new Stopwatch();
                    while (true){
                        try
                        {
                            myStopWatch.Restart();
                            await maaService.AttestOpenEnclaveAsync(enclaveInfo.GetMaaBody());
                            //myStopWatch.Stop();
                            i++;
                            var total = Interlocked.Increment(ref totalCount);
                            Logger.WriteLine($"{myThreadID, 2} : {i, 6} : {myStopWatch.ElapsedMilliseconds,6} : {(1000.0*total/uberStopWatch.ElapsedMilliseconds):F2} : {total}");
                        }
                        catch (Exception x)
                        {
                            Logger.WriteLine($"{myThreadID, 2} : Exception caught: {x.Message}");
                            await Task.Delay(15000);
                        }
                    }
                }));
            }
            Task.WaitAll(myTasks.ToArray());
            var serviceJwtToken = await maaService.AttestOpenEnclaveAsync(enclaveInfo.GetMaaBody());

            // Analyze results
            Logger.WriteBanner("VALIDATING MAA JWT TOKEN - BASICS");
            JwtValidationHelper.ValidateMaaJwt(attestDnsName, serviceJwtToken, this.includeDetails);

            Logger.WriteBanner("VALIDATING MAA JWT TOKEN - MATCHES CLIENT ENCLAVE INFO");
            enclaveInfo.CompareToMaaServiceJwtToken(serviceJwtToken, this.includeDetails);

            Logger.WriteLine("\n\n");
        }
    }
}
